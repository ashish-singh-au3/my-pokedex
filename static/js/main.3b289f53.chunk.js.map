{"version":3,"sources":["components/Footer.js","components/Main.js","components/newPoke.js","components/constants.js","components/NewSearch.js","components/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","Component","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","name","type","pokemon","_this2","fetch","then","res","json","data","setState","_this3","pokemonItem","map","Grid","item","xs","Card","CardContent","english","base","Attack","Defense","editPokemon","Button","className","variant","href","AddCircle_default","Navbar","expand","bg","Container","Brand","Search_default","Create_default","container","spacing","Footer_Footer","newPoke","changeHandler","e","defineProperty","target","value","submitHandler","preventDefault","console","log","axios","post","response","attack_level","defense_level","description","_this$state","Form","onSubmit","Group","Label","htmlFor","Control","as","rows","onChange","placeholder","isrequired","toFirstCharUppercase","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","NewSearch","classes","history","_useState","useState","_useState2","slicedToArray","pokemonData","setPokemonData","_useState3","_useState4","filter","setFilter","useEffect","get","results","newPokemonData","forEach","index","TextField","label","keys","pokemonId","includes","_pokemonData$pokemonI","sprite","key","onClick","push","concat","CardMedia","image","style","height","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","undefined","setPokemon","catch","error","species","weight","types","sprites","fullImageUrl","front_default","src","Link","url","typeInfo","generatePokemonJSX","Button_Button","App","react_router_dom","react_router","exact","path","component","render","components_Pokemon","Boolean","window","location","hostname","ReactDOM","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3b289f53.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h5>\r\n          <center>&copy; Copyright by Ashish Singh</center>\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"../App.css\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\n\r\nimport { Grid, Card, CardContent } from \"@material-ui/core\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\nimport Footer from \"./Footer\";\r\n\r\nexport default class Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: [],\r\n      name: [],\r\n      type: [],\r\n      pokemon: [],\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    fetch(\"http://localhost:4000/pokemon/?_limit=100\") // I have set the limit to 100 in order to load 100 pokemons, you can extend it to any number.\r\n      .then((res) => res.json())\r\n      .then((data) => this.setState({ pokemon: data }));\r\n  }\r\n\r\n  // For testing\r\n  //const [filter, setFilter] = useState(\"\");\r\n\r\n  //const handleSearchChange = (e) => {\r\n  //  serFilter(e.target.value)\r\n  // }\r\n\r\n  render() {\r\n    const pokemonItem = this.state.pokemon.map((pokemon) => (\r\n      <Grid item xs={4}>\r\n        <Card>\r\n          <CardContent>\r\n            {pokemon.id}.Name : {pokemon.name.english}\r\n          </CardContent>\r\n          <CardContent>\r\n            Type : {pokemon.type[0]},{pokemon.type[1]}\r\n          </CardContent>\r\n          <CardContent>Attack level : {pokemon.base.Attack}</CardContent>\r\n          <CardContent>Type : {pokemon.base.Defense}</CardContent>\r\n          {this.editPokemon}\r\n          <Button className=\"col-md-6 offset-md-3\" variant=\"dark\" href=\"/new\">\r\n            Add New Details\r\n            <AddCircleIcon />\r\n          </Button>\r\n        </Card>\r\n      </Grid>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n            <Container>\r\n              <Navbar.Brand href=\"new\" variant=\"dark\">\r\n                <div className=\" row-md-6 offset-md-3 nav-bar\">\r\n                  {\" \"}\r\n                  <strong>\r\n                    <h1>PokedexApp</h1>\r\n                  </strong>\r\n                </div>\r\n              </Navbar.Brand>\r\n            </Container>\r\n          </Navbar>\r\n          <br />\r\n          <Button\r\n            variant=\"dark\"\r\n            href=\"/search\"\r\n            className=\"col-md-3 offset-md-4\"\r\n          >\r\n            Search your favourite Pokemon here...\r\n            <SearchIcon />\r\n          </Button>\r\n        </div>\r\n        <hr />\r\n        <Button variant=\"dark\" href=\"/new\" className=\"col-md-3 offset-md-4\">\r\n          <CreateIcon /> Create a new Pokemon here\r\n        </Button>\r\n\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n\r\n        <Grid container spacing={2}>\r\n          {pokemonItem}\r\n        </Grid>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\"; // using axios to post the data\r\nimport \"../App.css\";\r\nimport Footer from \"./Footer\";\r\n//import Background from \"../new1.png\";\r\n\r\nexport default class newPoke extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      type: \"\",\r\n      attack_level: \"\",\r\n      defense_level: \"\",\r\n      description: \"\",\r\n    };\r\n  }\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    axios\r\n      .post(\" http://localhost:4000/newPokemon\", this.state)\r\n      .then((response) => {\r\n        console.log(response);\r\n      });\r\n  };\r\n  render() {\r\n    const { name, type, attack_level, defense_level, description } = this.state;\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"form-wrapper col-md-3 offset-md-4\">\r\n          <h2> Found a New Pokemon?...</h2>\r\n          <Form onSubmit={this.submitHandler}>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n              <Form.Control\r\n                id=\"name\"\r\n                name=\"name\"\r\n                as=\"textarea\"\r\n                rows=\"1\"\r\n                value={name}\r\n                onChange={this.changeHandler}\r\n                placeholder=\"Enter name of Pokemon...\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"type\">Type</Form.Label>\r\n              <Form.Control\r\n                id=\"type\"\r\n                name=\"type\"\r\n                as=\"textarea\"\r\n                rows=\"1\"\r\n                value={type}\r\n                onChange={this.changeHandler}\r\n                placeholder=\"Enter Type of Pokemon...\"\r\n                isrequired\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"attack_level\">Attack</Form.Label>\r\n              <Form.Control\r\n                id=\"attack_level\"\r\n                name=\"attack_level\"\r\n                as=\"textarea\"\r\n                rows=\"1\"\r\n                value={attack_level}\r\n                onChange={this.changeHandler}\r\n                placeholder=\"Enter attack-level...\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"defense_level\">Defense</Form.Label>\r\n              <Form.Control\r\n                id=\"defense_level\"\r\n                name=\"defense_level\"\r\n                as=\"textarea\"\r\n                rows=\"1\"\r\n                value={defense_level}\r\n                onChange={this.changeHandler}\r\n                placeholder=\"Enter defense-level...\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor=\"description\">Description</Form.Label>\r\n              <Form.Control\r\n                id=\"description\"\r\n                name=\"description\"\r\n                as=\"textarea\"\r\n                rows=\"3\"\r\n                value={description}\r\n                onChange={this.changeHandler}\r\n                placeholder=\"Please drop the description here...\"\r\n              />\r\n            </Form.Group>\r\n\r\n            <Button className=\"d-inline-block\" variant=\"dark\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n\r\n            <Button variant=\"dark\" className=\"col-md-3 offset-md-4\" href=\"/\">\r\n              Home\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const toFirstCharUppercase = (name) =>\r\n  name.charAt(0).toUpperCase() + name.slice(1);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Footer from \"./Footer\";\r\n//import \"../styles/main.css\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  CircularProgress,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pokedexContainer: {\r\n    paddingTop: \"20px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n  cardMedia: {\r\n    margin: \"auto\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n  },\r\n  searchContainer: {\r\n    display: \"flex\",\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"80px\",\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchIcon: {\r\n    alignSelf: \"flex-end\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchInput: {\r\n    width: \"200px\",\r\n    margin: \"5px\",\r\n  },\r\n}));\r\n\r\nconst NewSearch = (props) => {\r\n  const classes = useStyles();\r\n  const { history } = props;\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon?limit=100`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        const { results } = data;\r\n        const newPokemonData = {};\r\n        results.forEach((pokemon, index) => {\r\n          newPokemonData[index + 1] = {\r\n            id: index + 1,\r\n            name: pokemon.name,\r\n          };\r\n        });\r\n        setPokemonData(newPokemonData);\r\n      });\r\n  }, []);\r\n\r\n  const handleSearchChange = (e) => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  const getPokemonCard = (pokemonId) => {\r\n    const { id, name, sprite } = pokemonData[pokemonId];\r\n    return (\r\n      <Grid item xs={4} key={pokemonId}>\r\n        <Card onClick={() => history.push(`/${id}`)}>\r\n          <CardMedia\r\n            className={classes.cardMedia}\r\n            image={sprite}\r\n            style={{ width: \"130px\", height: \"130px\" }}\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.searchContainer}>\r\n        <SearchIcon className={classes.searchIcon} />\r\n        <TextField\r\n          className={classes.searchInput}\r\n          onChange={handleSearchChange}\r\n          label=\"Search Pokemon\"\r\n          variant=\"standard\"\r\n        />\r\n      </div>\r\n\r\n      {pokemonData ? (\r\n        <Grid container spacing={2} className={classes.pokedexContainer}>\r\n          {Object.keys(pokemonData).map(\r\n            (pokemonId) =>\r\n              pokemonData[pokemonId].name.includes(filter) &&\r\n              getPokemonCard(pokemonId)\r\n          )}\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewSearch;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nimport axios from \"axios\";\r\nimport Footer from \"./Footer\";\r\nimport \"../App.css\";\r\n\r\nconst Pokemon = (props) => {\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n\r\n  const generatePokemonJSX = (pokemon) => {\r\n    const { name, id, species, height, weight, types, sprites } = pokemon;\r\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n    const { front_default } = sprites;\r\n    return (\r\n      <div>\r\n        <Typography variant=\"h1\">\r\n          {`${id}.`} {toFirstCharUppercase(name)}\r\n          <img src={front_default} />\r\n        </Typography>\r\n        <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} />\r\n        <Typography variant=\"h3\">Pokemon Info</Typography>\r\n        <Typography>\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name} </Link>\r\n        </Typography>\r\n        <Typography>Height: {height} </Typography>\r\n        <Typography>Weight: {weight} </Typography>\r\n        <Typography variant=\"h6\"> Types:</Typography>\r\n        {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n          const { name } = type;\r\n          return <Typography key={name}> {`${name}`}</Typography>;\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"poke-card\">\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX(pokemon)}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n      {pokemon !== undefined && (\r\n        <center>\r\n          <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n            Back to Home\r\n          </Button>\r\n        </center>\r\n      )}\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\nexport default Pokemon;\r\n","import React from \"react\";\n\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\n\nimport Main from \"./components/Main\";\n\nimport newPoke from \"./components/newPoke\";\nimport NewSearch from \"./components/NewSearch\"; //   <Route exact path=\"/search\" component={NewSearch} />\n\nimport Pokemon from \"./components/Pokemon\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/new\" component={newPoke} />\n          <Route exact path=\"/search\" component={NewSearch} />\n          <Route\n            exact\n            path=\"/:pokemonId\"\n            render={(props) => <Pokemon {...props} />}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import { Router } from \"react-router-dom\";\n//import { createBrowserHistory } from \"history\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n//const history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}